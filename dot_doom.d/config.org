* Doom Config
Place your private configuration here!

** User Data
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.

#+begin_src emacs-lisp
;$DOOMDIR/config.el -*- lexical-binding: t; -*-

(setq user-full-name "Etienne Palanga"
      user-mail-address "e.palanga@disroot.org")
#+end_src

** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom:

| Variable                   | Use                                                                     |
|----------------------------+-------------------------------------------------------------------------|
| ~doom-font~                | The primary font to use                                                 |
| ~doom-variable-pitch-font~ | A non-monospace font (where applicable)                                 |
| ~doom-big-font~            | Used for ~doom-big-font-mode~; use this for presentations or streaming. |
| ~doom-unicode-font~        | For unicode glyphs                                                      |
| ~doom-serif-font~          | For the ~fixed-pitch-serif~ face                                        |

If you or Emacs can't find your font, use ~M-x describe-font~ to look them up, ~M-x eval-region~ to execute elisp code, and ~M-x doom/reload-font~ to refresh your font settings. If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!
See ~C-h v doom-font~ for documentation and more examples of what they accept.

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "FiraCode Nerd Font Mono" :size 14 :weight 'normal)
      doom-variable-pitch-font (font-spec :family "Noto Sans CJK JP" :size 14))
#+end_src

** Color Theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set ~doom-theme~ or manually load a theme with the ~load-theme~ function. This is the default:
#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
#+end_src

Somehow when running emacs through emacsclient the color scheme gets messed up. So this is a hook that reloads the color theme when making a new frame.
#+begin_src emacs-lisp
(add-hook! 'after-make-frame-functions
  (defun my-load-theme-fix (frame)
      (select-frame frame)
      (doom/reload-theme)))
#+end_src

** Line Numbers
This determines the style of line numbers in effect. If set to ~nil~, line numbers are disabled. For relative line numbers, set this to ~relative~.

#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

** Org Mode
*** Org Directory

If you use ~org~ and don't want your org files in the default location below, change ~org-directory~. It must be set before org loads!

#+begin_src emacs-lisp
(setq org-directory "~/MEGAsync/org/")
#+end_src

*** Org Auto-Tangle Hook
This automatically tangles literate config files on save.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda () (add-hook 'after-save-hook #'org-babel-tangle
                          :append :local)))
#+end_src


*** Beautify
**** Hide Emphasis Markup
#+begin_src elisp
(setq org-hide-emphasis-markers t)
#+end_src

**** Font Lock for list markers
#+begin_src elisp
(font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

**** Heading Fonts
#+begin_src elisp
(let* ((variable-tuple
          (cond ((x-list-fonts "Noto Sans")         '(:font "Noto Sans"))
                ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                ((x-list-fonts "Verdana")         '(:font "Verdana"))
                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         ;(base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold)))
  ; :foreground ,base-font-color

    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
#+end_src


** Calendar Language
Use Japanese for the calendar.

#+begin_src emacs-lisp
(setq calendar-week-start-day 1
          calendar-day-name-array ["日 " "月 " "火 " "水 "
                                   "木 " "金 " "土 "]
          calendar-month-name-array ["1月" "2月" "3月" "4月"
                                     "5月" "6月" "7月" "8月"
                                     "9月" "10月" "11月" "12月"])
#+end_src

** Reconfiguring Packages
Whenever you reconfigure a package, make sure to wrap your config in an
~after!~ block, otherwise Doom's defaults may override your settings. E.g.

#+begin_src emacs-lisp :tangle no
(after! PACKAGE
  (setq x y))
#+end_src

The exceptions to this rule:

- Setting file/directory variables (like ~org-directory~)
- Setting variables which explicitly tell you to set them before their
    package is loaded (see ~C-h v VARIABLE~ to look up their documentation).
- Setting doom variables (which start with ~doom-~ or ~+~).

Here are some additional functions/macros that will help you configure Doom.

- ~load!~ for loading external ~*.el~ files relative to this one
- ~use-package!~ for configuring packages
- ~after!~ for running code after a package has loaded
- ~add-load-path!~ for adding directories to the ~load-path~, relative to this file. Emacs searches the ~load-path~ when you load packages with ~require~ or ~use-package~.
- ~map!~ for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press ~K~ (non-evil users must press ~C-c c k~). This will open documentation for it, including demos of how they are used. Alternatively, use ~C-h o~ to look up a symbol (functions, variables, faces, etc).

You can also try ~gd~ (or ~C-c c d~) to jump to their definition and see how they are implemented.

*** Rust Analyzer
This configures the rust mode to use rust-analyzer and display inlay hints.

#+begin_src emacs-lisp
(after! lsp-rust
  (setq lsp-rust-server 'rust-analyzer)
  (setq lsp-rust-analyzer-server-display-inlay-hints t))
#+end_src

*** Miscellaneous Package Configs
#+begin_src emacs-lisp
(load! "config/docstr.el")

(after! eglot
  :config
  (add-to-list 'eglot-server-programs '(haxe-mode . ("node" "~/Stuff/haxe-language-server/bin/server.js")))
  (add-hook 'haxe-mode-hook 'eglot-ensure)
  (set-eglot-client! 'haxe-mode' '("node" "~/Stuff/haxe-language-server/bin/server.js")))

(after! projectile
  (setq projectile-project-search-path '("~/Programming/Rust" "~/Documents/Uni/Arbeit" "~/.config")))
#+end_src
